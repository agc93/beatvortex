<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BeatVortex â€“ Developer Guide</title><link>/docs/developer/</link><description>Recent content in Developer Guide on BeatVortex</description><generator>Hugo -- gohugo.io</generator><atom:link href="/docs/developer/index.xml" rel="self" type="application/rss+xml"/><item><title>Docs: Packaging for Mod Authors</title><link>/docs/developer/authoring/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/developer/authoring/</guid><description>
&lt;p>In general, if your mod is compatible with Mod Assistant, it will work with BeatVortex! See below for some extra information on how different mod types are handled.&lt;/p>
&lt;h3 id="song-maps">Song Maps&lt;/h3>
&lt;p>BeatVortex includes special logic for installing song maps. As long as your mod archive includes any &lt;code>.dat&lt;/code> or &lt;code>.egg&lt;/code> files, the installer will automatically extract the archive into its own directory under the &lt;code>Beat Saber_Data/CustomLevels&lt;/code> directory.&lt;/p>
&lt;p>If your map is being downloaded from BeatSaver using either OneClick or the ZIP archive, BeatVortex will try and fetch metadata for the map during installation. Once installed, the map will have its source set to &amp;ldquo;BeatSaver&amp;rdquo; and metadata should be available in the details panel.&lt;/p>
&lt;p>For maximum compatibility, &lt;em>don&amp;rsquo;t&lt;/em> nest map files under &lt;code>Beat Saber_Data&lt;/code> inside the ZIP file. It should still install correctly, but Vortex will think your map is actually a plugin and might not handle things exactly right.&lt;/p>
&lt;blockquote>
&lt;p>&lt;strong>Do not&lt;/strong> change the mod type for installed maps, or they will be deployed to the wrong place.&lt;/p>
&lt;/blockquote>
&lt;h3 id="models-avatars-sabers-and-notes">Models (Avatars, Sabers and Notes)&lt;/h3>
&lt;p>BeatVortex will pick up that a mod is installing a model based on two conditions: theres only one file and it ends with &lt;code>.avatar&lt;/code>, &lt;code>.platform&lt;/code> or &lt;code>.saber&lt;/code>. As long as those are true, BeatVortex will automatically install the model to its appropriate &lt;code>Custom&lt;/code> folder in the Data directory.&lt;/p>
&lt;p>If the model has been downloaded from ModelSaber, BeatVortex will try and fetch metadata for the model during installation. Once installed, the model will have its source set to &amp;ldquo;ModelSaber&amp;rdquo; and some basic metadata should be available in the details panel.&lt;/p>
&lt;h3 id="plugin-mods">Plugin Mods&lt;/h3>
&lt;p>Mods that don&amp;rsquo;t get picked up as either a song map or custom model (see above) will be &lt;em>assumed&lt;/em> to be plugin mods. These mods are automatically installed to the root of the installation directory.&lt;/p>
&lt;p>If a mod has been downloaded from BeatMods, BeatVortex will try and fetch metadata for the mod during installation. This is also true for installs using OneClick (assuming the user has enabled Vortex to handle OneClick links). During installation, BeatVortex will try and pull all the metadata it can from BeatMods including all the basic information, mod version &lt;strong>and dependencies&lt;/strong>.&lt;/p>
&lt;h3 id="type-detection">Type Detection&lt;/h3>
&lt;p>At present, BeatVortex&amp;rsquo;s methods of detecting what mod types are in use is pretty barebones:&lt;/p>
&lt;ul>
&lt;li>Mod types are determined by presence of specific files/paths. Maps have &lt;code>.dat|.egg&lt;/code>, models have &lt;code>.saber|.platform|.avatar&lt;/code>, etc&lt;/li>
&lt;li>Mod sources are determined by matching the format of the name of the archive. It&amp;rsquo;s horrible and hacky, but works for now.&lt;/li>
&lt;/ul></description></item><item><title>Docs: Installer Logic</title><link>/docs/developer/installers/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/developer/installers/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>The information below &lt;strong>only&lt;/strong> applies to BeatVortex versions from 0.3 onwards. Installation logic was completely rebuilt in 0.3.0 (and again in 0.3.1).&lt;/p>
&lt;/div>
&lt;p>BeatVortex&amp;rsquo;s installation logic is &lt;em>slightly&lt;/em> over-engineered in order to meet a few design goals:&lt;/p>
&lt;ol>
&lt;li>Handle different mod types invisibly&lt;/li>
&lt;li>Abstract away the actual download source of a mod&lt;/li>
&lt;li>Handle both installation and metadata in a Vortex-friendly way.&lt;/li>
&lt;/ol>
&lt;h3 id="background">Background&lt;/h3>
&lt;p>As of 0.3.1, BeatVortex registers three separate installers to handle each of the available mod types: BeatMods-style plugin mods, song maps (from BeatSaver or not), models (from ModelSaber or not). The plugin mod installer also serves as a fallback installer. Vortex is responsible for selecting the installer to use based on basic test conditions (&lt;code>isSongMod&lt;/code> and &lt;code>isModelMod&lt;/code> in particular).&lt;/p>
&lt;p>One of the biggest conceptual changes is differentiating the mod type and the mod source. The mod type will control how BeatVortex creates install instructions, and varies for plugins, maps, models or generic files. The mod source will control how BeatVortex provides metadata about the mod and varies for the supported sources: BeatMods, BeatSaver/BeastSaber, and ModelSaber.&lt;/p>
&lt;p>The &lt;code>ModInstaller&lt;/code> interface is used by an installer implementation for a mod &lt;em>type&lt;/em> and controls how install instructions are created from a given file list. The &lt;code>MetadataSource&lt;/code> interface is a separate optional abstraction that can be used for a mod &lt;em>source&lt;/em> to handle any install-time metadata, by returning &lt;code>attribute&lt;/code> instructions to be combined with the original install instructions.&lt;/p>
&lt;h3 id="future-refactoring">Future Refactoring&lt;/h3>
&lt;p>This new system is a major rework and definitely not guaranteed stable. As it stands, BeatVortex still has a lot of touch points between Vortex, the extension, the installers and the metadata sources. Future releases will likely tweak the existing &lt;code>ModInstaller&lt;/code>/&lt;code>MetadataSource&lt;/code> layers to make things a little clearer and handle failures better. Raise a GitHub issue before doing any drastic work around mod installation.&lt;/p></description></item><item><title>Docs: Dependency Management</title><link>/docs/developer/dependencies/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/developer/dependencies/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>The information below &lt;strong>only&lt;/strong> applies to BeatVortex versions from 0.3 onwards. Installation logic was completely rebuilt in 0.3.0.&lt;/p>
&lt;p>Additionally, dependencies are an area of very active development and things are changing rapidly. Docs may be a little slow to update.&lt;/p>
&lt;/div>
&lt;p>Dependency management in Vortex is always a bit of a mess and it&amp;rsquo;s especially so if you&amp;rsquo;re &lt;em>not&lt;/em> using Nexus Mods, which we are definitely not. As it stands, BeatVortex can notify you about missing dependencies and will &lt;strong>attempt&lt;/strong> to install them for you when you install a mod.&lt;/p>
&lt;blockquote>
&lt;p>It&amp;rsquo;s our understanding that BeatVortex is the only game extension handling non-Nexus dependencies so this is uncharted ground.&lt;/p>
&lt;/blockquote>
&lt;p>There&amp;rsquo;s some limitations in how Vortex/&lt;code>modmeta-db&lt;/code>/BeatVortex/BeatMods interact that makes this story surprisingly hard.&lt;/p>
&lt;h4 id="beatmods-doesnt-have-md5s-for-archives">BeatMods doesn&amp;rsquo;t have MD5s for archives&lt;/h4>
&lt;p>The backing logic for Vortex&amp;rsquo;s dependency management happens inside the &lt;code>modmeta-db&lt;/code> library. This library allows for querying metadata (including dependencies) using a single identifying key for a mod download: the MD5 sum of the archive. Unfortunately, BeatMods &lt;strong>does not&lt;/strong> store the hash of archive files, only of the individual files. This means we can&amp;rsquo;t do on-demand lookups (through &lt;code>modmeta-db&lt;/code>) for mod files.&lt;/p>
&lt;h4 id="beatmods-does-dependencies-weird">BeatMods does dependencies weird&lt;/h4>
&lt;p>The BeatMods API, for reasons likely lost to time, returns dependencies from the API in a super-weird way: top-level dependencies are fine, but &lt;em>their&lt;/em> dependencies are only returned as document IDs, meaning we can&amp;rsquo;t easily go from a single API call to a full dependency tree. Thankfully, Vortex (mostly) has our back here, and can do basic-but-good-enough dependency resolution.&lt;/p>
&lt;h4 id="vortex-doesnt-fully-implement-modmeta-db">Vortex doesn&amp;rsquo;t fully implement &lt;code>modmeta-db&lt;/code>&lt;/h4>
&lt;p>The backing &lt;code>modmeta-db&lt;/code> supports looking up mod files by a couple of different &amp;ldquo;keys&amp;rdquo;: MD5 hash (see above), logical file name, and custom file expressions. At present, since Nexus uses MD5 hashes, Vortex mostly just uses the MD5 hash for installation. In earlier versions of Vortex, that meant we could specify dependency rules, but Vortex wouldn&amp;rsquo;t know where to &lt;em>find&lt;/em> those dependencies.&lt;/p>
&lt;p>Vortex releases from 1.2.12 added support for looking up mod dependencies using a logical file name, meaning we can now use a metaserver (essentially an implementation of &lt;code>modmeta-db&lt;/code> over REST) to return information on dependencies, including where to find them (i.e BeatMods). Finally, Vortex releases from 1.12.3 onwards improved dependency resolution so that BeatMods extensions installed from archives or the browser should automatically install all the required dependencies.&lt;/p>
&lt;blockquote>
&lt;p>A huge thanks to the Nexus/Vortex team, who have been very helpful in expanding and explaining Vortex&amp;rsquo;s dependency support. Thanks Tannin!&lt;/p>
&lt;/blockquote>
&lt;p>We now add a metaserver at startup that returns metadata and dependency information for all the mods available on BeatMods. This behaviour can be toggled off in the Settings if desired. With the metaserver disabled, Vortex will still warn on missing &lt;em>immediate&lt;/em> dependencies, but it won&amp;rsquo;t be able to automatically install them, or build a full dependency tree.&lt;/p>
&lt;h4 id="beatmods-provides-only-basic-dependency-information">BeatMods provides only basic dependency information&lt;/h4>
&lt;p>BeatMods dependencies can essentially be summarised down to a mod name and specific version. In practice, this is generally &lt;em>enough&lt;/em> and mod managers (whether it&amp;rsquo;s BeatVortex or Mod Assistant) can just install that version. The only problem here is that we are now locking depenencies to very specific package versions which Vortex now has to take a hard-and-fast restriction.&lt;/p>
&lt;p>As a middle ground, BeatVortex assumes that mod authors are following Semantic Versioning (SemVer) correctly and matches major versions only. That means that, for example, a mod asking for SongCore 2.7.5 could have SongCore 2.9.x installed.&lt;/p>
&lt;blockquote>
&lt;p>We&amp;rsquo;re using the &lt;code>^&lt;/code> operator for those already familiar with the Node/npm semver format.&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Metadata and Meta Servers</title><link>/docs/developer/meta/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/developer/meta/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>The information below is not necessary for just using Vortex to handle your mods. It is included below for transparency and for the interest of curious users.&lt;/p>
&lt;/div>
&lt;p>There&amp;rsquo;s a few extra moving parts needed in BeatVortex since we don&amp;rsquo;t use Nexus Mods for hosting mods. The most important one of these is what Vortex calls a &amp;ldquo;meta server&amp;rdquo;. The extension automatically adds a special meta server to your Vortex configuration when it starts up.&lt;/p>
&lt;h2 id="meta-servers">Meta Servers&lt;/h2>
&lt;p>Metaservers are essentially a thin API used to retrieve mod-related metadata for a given &lt;strong>file&lt;/strong>. That&amp;rsquo;s an important distinction: metaservers are not used to find &lt;em>or&lt;/em> download mods, they&amp;rsquo;re used to get more information about a mod that the client already knows about.&lt;/p>
&lt;p>The API for metaservers is part of the &lt;a href="https://github.com/Nexus-Mods/modmeta-db">Nexus-Mods/modmeta-db&lt;/a> library, but the one used in BeatVortex has its own implementation&lt;/p>
&lt;h4 id="example-dependencies">Example: Dependencies&lt;/h4>
&lt;p>When you install a mod with BeatVortex (let&amp;rsquo;s use ScoreSaber as an example), the extension will read information from BeatMods to determine its dependencies. Our extension (and therefore Vortex) now know that ScoreSaber needs a certain version of SongCore and BeatSaberMarkupLanguage. What it doesn&amp;rsquo;t know is &lt;strong>where to find them&lt;/strong>. Vortex then calls its configured meta servers to find out more information about &amp;ldquo;SongCore&amp;rdquo; and &amp;ldquo;BeatSaberMarkupLanguage&amp;rdquo;, and our server responds with all the information it can pull from BeatMods including the most important part: where to get those files.&lt;/p>
&lt;h2 id="beatvortex-metaserver">BeatVortex Metaserver&lt;/h2>
&lt;p>So with the background out of the way, what does this have to do with BeatVortex? Well, since we don&amp;rsquo;t use Nexus, we depend on a metaserver for a lot of the metadata used during mod installation. Notably, we also rely on a metaserver for full dependency resolution (see above).&lt;/p>
&lt;blockquote>
&lt;p>BeatVortex still works just fine without the metaserver, but at reduced functionality. For example, Vortex will detect and warn about missing dependencies, but it can&amp;rsquo;t automatically install them without the metaserver.&lt;/p>
&lt;/blockquote>
&lt;p>So, to save every user having to run their own server (or running one locally out-of-process), we add a shared metaserver (&lt;code>meta-beatvortex&lt;/code>) at startup. This metaserver gets queried by Vortex whenever a user installs a mod. We actually ignore the &amp;ldquo;default&amp;rdquo; query that Vortex uses, since BeatMods doesn&amp;rsquo;t support it. If the server receives a query for a specific dependency though, the server will query the BeatMods API for a matching mod and return some basic info on the mod to Vortex.&lt;/p>
&lt;h2 id="faq">FAQ&lt;/h2>
&lt;h3 id="what-information-does-the-metaserver-get">What information does the metaserver get?&lt;/h3>
&lt;p>The BeatVortex metaserver in particular responds to two queries: &lt;code>by_key&lt;/code> and &lt;code>by_name&lt;/code>. The &lt;code>by_key&lt;/code> query is a single MD5 hash of a file currently being installed. We ignore these, since BeatMods doesn&amp;rsquo;t support them. The &lt;code>by_name&lt;/code> query is a simple API call with two parts: a name (like &lt;code>SongCore&lt;/code>) and a version (like &lt;code>^2.9.1&lt;/code>). The server won&amp;rsquo;t see any other details from your installation or settings.&lt;/p>
&lt;h3 id="can-i-run-my-own-metaserver">Can I run my own metaserver?&lt;/h3>
&lt;p>Yes! The code our server uses is &lt;a href="https://github.com/agc93/modmeta-relay">open source on GitHub&lt;/a> and easy enough to run on your own. Just run the server, add the BeatVortex plugin, then add its publicly accessible URL to your Vortex configuration.&lt;/p>
&lt;h3 id="can-the-metaserver-be-turned-off">Can the metaserver be turned off?&lt;/h3>
&lt;p>Yes, but you probably shouldn&amp;rsquo;t. Unless you&amp;rsquo;re testing your own server or something, it&amp;rsquo;s best to leave it enabled. Disabling the metaserver will immediately remove the server from Vortex&amp;rsquo;s configuration meaning anything that depends on a metaserver will stop working. Most notably, dependencies won&amp;rsquo;t automatically be downloaded/installed anymore!&lt;/p>
&lt;blockquote>
&lt;p>There was also a bug in Vortex versions prior to 1.12.3 where disabling metaservers didn&amp;rsquo;t actually remove them which could cause problems during install.&lt;/p>
&lt;/blockquote></description></item><item><title>Docs: Translating BeatVortex</title><link>/docs/developer/translation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/developer/translation/</guid><description>
&lt;div class="pageinfo pageinfo-primary">
&lt;p>The information below &lt;strong>only&lt;/strong> applies to BeatVortex versions from 0.3.1 onwards. Versions prior to 0.3.1 did not include the code necessary to support translations.&lt;/p>
&lt;/div>
&lt;p>Vortex includes built-in translation support and there&amp;rsquo;s already quite a few translations &lt;a href="https://www.nexusmods.com/site/mods/categories/7/">available on Nexus Mods&lt;/a>. Any of the &amp;ldquo;common&amp;rdquo; interface elements from Vortex that are used in BeatVortex (things like menus, tables and common buttons) will all use the language you specify in Settings (under Interface).&lt;/p>
&lt;blockquote>
&lt;p>For general information on translation support in Vortex, check out the &lt;a href="https://wiki.nexusmods.com/index.php/Translating_Vortex">Vortex wiki&lt;/a>&lt;/p>
&lt;/blockquote>
&lt;p>However, there&amp;rsquo;s quite a few Beat Saber-specific parts that we add to Vortex, and these won&amp;rsquo;t automatically be translated. Of particular note are the BeatMods browser, Beat Saber-specific settings and some dialogs and notifications. We&amp;rsquo;ve built support for translating these elements but that requires actual, you know, translations!&lt;/p>
&lt;h2 id="building-translations">Building Translations&lt;/h2>
&lt;p>If you&amp;rsquo;re already familiar with Vortex (or &lt;code>react-i18next&lt;/code>-based) translations then the short version is that BeatVortex uses a separate &lt;code>beatvortex&lt;/code> namespace (and &lt;code>beatvortex.json&lt;/code> file) to get localised strings.&lt;/p>
&lt;blockquote>
&lt;p>We haven&amp;rsquo;t worked with Vortex translations much before: please raise an issue if something doesn&amp;rsquo;t look right or needs changing!&lt;/p>
&lt;/blockquote>
&lt;p>More specifically, Vortex will &lt;strong>usually&lt;/strong> look for a &lt;code>beatvortex.json&lt;/code> file inside &lt;code>%APPDATA%/Vortex/resources/locales/&amp;lt;ISO-CODE&amp;gt;&lt;/code> and use any translated strings it finds there, falling back to English if none is found.&lt;/p>
&lt;h3 id="existing-translations">Existing Translations&lt;/h3>
&lt;p>If you are working on, or maintaining, an existing Vortex translation, you can add BeatVortex support by adding a &lt;code>beatvortex.json&lt;/code> file to your translation package for the BeatVortex-specific strings. A loose example file that should cover most elements is available at &lt;a href="https://beatvortex.dev/beatvortex_en.json">beatvortex.dev/beatvortex_en.json&lt;/a> that translators can use for a good starting point.&lt;/p>
&lt;h3 id="translation">Translation&lt;/h3>
&lt;p>However, we&amp;rsquo;ve added an extra convention to make translations a bit easier: the extension contains a file called &lt;a href="https://github.com/agc93/beatvortex/blob/master/src/language_en.json">language_en.json&lt;/a> with all the currently translateable English strings. When Vortex starts up, BeatVortex will load in any &lt;code>language_&amp;lt;code&amp;gt;.json&lt;/code> files it finds, so you can create a &lt;code>language_fr.json&lt;/code> file to add French translations or a &lt;code>language_ru.json&lt;/code> file to add Russian translations.&lt;/p>
&lt;p>Once installed, these files will be at &lt;code>%APPDATA%/Vortex/plugins/game-beatsaber/&lt;/code>. You can manually create these files while translating.&lt;/p>
&lt;blockquote>
&lt;p>To be clear, please try and contribute translations back to the many &lt;a href="https://www.nexusmods.com/site/mods/categories/7/">existing Vortex translations&lt;/a> primarily. If there isn&amp;rsquo;t an existing translation or you&amp;rsquo;re having trouble getting translations included, only then add them directly to the extension instead.&lt;/p>
&lt;/blockquote>
&lt;h2 id="documentation">Documentation&lt;/h2>
&lt;p>This documentation, like the extension code, is &lt;a href="https://github.com/agc93/beatvortex/blob/master/docs/">all open-source&lt;/a>. If you&amp;rsquo;d like to help out with translating the documentation, you&amp;rsquo;re an amazing person! Our docs builder (Hugo with Docsy) is capable of supporting multiple languages using folders under the &lt;code>docs/content/&lt;/code> path (for example, &lt;code>docs/content/es&lt;/code> or &lt;code>/docs/content/de&lt;/code>). If you submit a PR with any translated docs, we will enable that language in our site build and your translated docs will be available when we next publish.&lt;/p></description></item><item><title>Docs: Docs Contributions</title><link>/docs/developer/docs/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>/docs/developer/docs/</guid><description>
&lt;p>Ironically, the documentation side of the project has slightly higher environment requirements than the project itself! We&amp;rsquo;re using the Hugo static site generator with the Docsy template, so you will need to have a recent version of Hugo Extended installed, as well as &lt;code>npm&lt;/code> to restore the required tools.&lt;/p>
&lt;p>Actual docs content is all stored in the &lt;code>content/&lt;/code> directory, organised under language. At this time only English (&lt;code>en&lt;/code>) is included, although translations are more than welcome!&lt;/p></description></item></channel></rss>